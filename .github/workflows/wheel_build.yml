name: Python wheel build

on:
  pull_request:
  push:
    branches: ["master"]
    tags: ["v[0-9]+.[0-9]+.**"]
  workflow_dispatch:
    inputs:
      create_release:
        type: boolean
        required: true
        default: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.semrel.outputs.changelog }}
      version: ${{ steps.semrel.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - uses: actions/cache@v3
        id: cached-poetry
        with:
          path: |
            ~/.local
            ~/.cache/pypoetry/virtualenvs
          key: poetry-0

      - uses: snok/install-poetry@v1
        if: steps.cached-poetry.outputs.cache-hit != 'true'

      - uses: go-semantic-release/action@v1
        id: semrel
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          dry: inputs.create_release != true
          changelog-generator-opt: "emojis=true"

      - name: Set release version number
        if: inputs.create_release == true
        run: poetry version ${{ steps.semrel.outputs.version }}

      - name: Install system dependencies
        run: sudo apt-get install --yes --no-install-recommends build-essential curl git libffi-dev

      - name: Install Python dependencies
        run: poetry install --no-interaction

      - name: Check formatting with black
        run: poetry run black --check .

      - name: Lint with flake8
        run: poetry run flake8

      - name: Lint with pylint
        run: poetry run pylint acme_bot/

      - name: Run tests with pytest
        run: poetry run pytest test/

      - name: Build Python wheel
        run: poetry build --no-interaction

      - name: Convert to platform-independent wheel
        run: |
          set -eu -o pipefail
          
          SRC_WHEEL=dist/*.whl
          DEST_WHEEL="$(basename $SRC_WHEEL | cut --delimiter '-' --fields -2)-py3-none-any.whl"
          
          TMP_DIR=$(mktemp --directory)
          unzip $SRC_WHEEL -d $TMP_DIR
          rm $SRC_WHEEL
          
          pushd $TMP_DIR
          sed --in-place 's/^Root-Is-Purelib.*$/Root-Is-Purelib: true/' **/WHEEL
          sed --in-place 's/^Tag.*$/Tag: py3-none-any/' **/WHEEL
          zip --recurse-paths "$GITHUB_WORKSPACE/dist/$DEST_WHEEL" *

      - uses: actions/upload-artifact@v3
        with:
          name: python-wheel
          path: dist/*.whl

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: inputs.create_release == true
    concurrency:
      group: semantic-release
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: python-wheel
          path: dist

      - uses: softprops/action-gh-release@v1
        with:
          body: ${{ needs.build-and-test.outputs.changelog }}
          fail_on_unmatched_files: true
          files: dist/*.whl

      - name: Update development version
        run: poetry version '${{ needs.build-and-test.outputs.version }}-dev'

      - uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          message: Update development version
          add: pyproject.toml
