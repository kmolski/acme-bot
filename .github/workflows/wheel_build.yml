name: Python wheel build

on:
  pull_request:
  push:
    branches: ['master']
  workflow_dispatch:
    inputs:
      create_release:
        type: boolean
        required: true
        default: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      version: ${{ steps.semrel.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 100
          fetch-tags: true

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - uses: actions/cache@v4
        id: cached-poetry
        with:
          path: |
            ~/.local
            ~/.cache/pypoetry/virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}

      - uses: snok/install-poetry@v1
        if: steps.cached-poetry.outputs.cache-hit != 'true'

      - uses: go-semantic-release/action@v1
        if: inputs.create_release == true
        id: semrel
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          changelog-generator-opt: 'emojis=true'

      - name: Install Python dependencies
        run: poetry self add 'poetry-dynamic-versioning[plugin]' && poetry install --no-interaction

      - name: Check formatting with black
        run: poetry run black --check .

      - name: Lint with flake8
        run: poetry run flake8

      - name: Lint with pylint
        run: poetry run pylint acme_bot/

      - name: Run tests with pytest
        run: poetry run pytest test/

      - name: Build Python wheel
        run: poetry build --no-interaction

      - name: Generate remote API schema
        shell: bash
        run: poetry run docs/gen/remote_api_schema.py >remote_api.json

      - uses: actions/upload-artifact@v4
        with:
          name: python-wheel
          path: |
            dist/*.whl
            remote_api.json

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: inputs.create_release == true
    concurrency:
      group: semantic-release
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: python-wheel

      - name: Upload release assets
        run: gh release upload "$TAG_NAME" dist/*.whl remote_api.json
        env:
          TAG_NAME: 'v${{ needs.build-and-test.outputs.version }}'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: inputs.create_release == true
    concurrency:
      group: docker-buildx
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: python-wheel

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: 'ghcr.io'
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v5
        with:
          tags: |
            'ghcr.io/kmolski/acme-bot:v${{ needs.build-and-test.outputs.version }}'
            'ghcr.io/kmolski/acme-bot:latest'
          platforms: linux/amd64,linux/arm64
          context: .
          push: true
